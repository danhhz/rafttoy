// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: transport.proto

/*
	Package transportpb is a generated protocol buffer package.

	It is generated from these files:
		transport.proto

	It has these top-level messages:
*/
package transportpb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import raftpb "go.etcd.io/etcd/raft/raftpb"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for RaftService service

type RaftServiceClient interface {
	RaftMessage(ctx context.Context, opts ...grpc.CallOption) (RaftService_RaftMessageClient, error)
}

type raftServiceClient struct {
	cc *grpc.ClientConn
}

func NewRaftServiceClient(cc *grpc.ClientConn) RaftServiceClient {
	return &raftServiceClient{cc}
}

func (c *raftServiceClient) RaftMessage(ctx context.Context, opts ...grpc.CallOption) (RaftService_RaftMessageClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_RaftService_serviceDesc.Streams[0], c.cc, "/transportpb.RaftService/RaftMessage", opts...)
	if err != nil {
		return nil, err
	}
	x := &raftServiceRaftMessageClient{stream}
	return x, nil
}

type RaftService_RaftMessageClient interface {
	Send(*raftpb.Message) error
	Recv() (*raftpb.Message, error)
	grpc.ClientStream
}

type raftServiceRaftMessageClient struct {
	grpc.ClientStream
}

func (x *raftServiceRaftMessageClient) Send(m *raftpb.Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *raftServiceRaftMessageClient) Recv() (*raftpb.Message, error) {
	m := new(raftpb.Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for RaftService service

type RaftServiceServer interface {
	RaftMessage(RaftService_RaftMessageServer) error
}

func RegisterRaftServiceServer(s *grpc.Server, srv RaftServiceServer) {
	s.RegisterService(&_RaftService_serviceDesc, srv)
}

func _RaftService_RaftMessage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RaftServiceServer).RaftMessage(&raftServiceRaftMessageServer{stream})
}

type RaftService_RaftMessageServer interface {
	Send(*raftpb.Message) error
	Recv() (*raftpb.Message, error)
	grpc.ServerStream
}

type raftServiceRaftMessageServer struct {
	grpc.ServerStream
}

func (x *raftServiceRaftMessageServer) Send(m *raftpb.Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *raftServiceRaftMessageServer) Recv() (*raftpb.Message, error) {
	m := new(raftpb.Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _RaftService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "transportpb.RaftService",
	HandlerType: (*RaftServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RaftMessage",
			Handler:       _RaftService_RaftMessage_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "transport.proto",
}

func init() { proto.RegisterFile("transport.proto", fileDescriptorTransport) }

var fileDescriptorTransport = []byte{
	// 141 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2f, 0x29, 0x4a, 0xcc,
	0x2b, 0x2e, 0xc8, 0x2f, 0x2a, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x86, 0x0b, 0x14,
	0x24, 0x49, 0xa9, 0xa5, 0xe7, 0xeb, 0xa5, 0x96, 0x24, 0xa7, 0xe8, 0x65, 0xe6, 0xeb, 0x83, 0x68,
	0xfd, 0xa2, 0xc4, 0xb4, 0x12, 0x30, 0x51, 0x90, 0x04, 0xa6, 0x20, 0x9a, 0x8c, 0x5c, 0xb8, 0xb8,
	0x83, 0x12, 0xd3, 0x4a, 0x82, 0x53, 0x8b, 0xca, 0x32, 0x93, 0x53, 0x85, 0x4c, 0x21, 0x5c, 0xdf,
	0xd4, 0xe2, 0xe2, 0xc4, 0xf4, 0x54, 0x21, 0x7e, 0x3d, 0x88, 0x0e, 0x3d, 0xa8, 0x80, 0x14, 0xba,
	0x80, 0x12, 0x83, 0x06, 0xa3, 0x01, 0xa3, 0x93, 0xc0, 0x89, 0x47, 0x72, 0x8c, 0x17, 0x1e, 0xc9,
	0x31, 0x3e, 0x78, 0x24, 0xc7, 0x38, 0xe1, 0xb1, 0x1c, 0x43, 0x12, 0x1b, 0xd8, 0x78, 0x63, 0x40,
	0x00, 0x00, 0x00, 0xff, 0xff, 0xd0, 0x20, 0x6d, 0x7c, 0xa6, 0x00, 0x00, 0x00,
}
