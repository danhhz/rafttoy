// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: transport.proto

/*
	Package transportpb is a generated protocol buffer package.

	It is generated from these files:
		transport.proto

	It has these top-level messages:
		RaftMsg
*/
package transportpb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import raftpb "go.etcd.io/etcd/raft/raftpb"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type RaftMsg struct {
	// Epoch indicates the test epoch that this message was sent from. Raft
	// state is reset when an epoch increment is detected and Raft messages
	// from previous epochs are discarded.
	Epoch int32 `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	// Msgs is a group of wrapped Raft message.
	Msgs []raftpb.Message `protobuf:"bytes,2,rep,name=msgs" json:"msgs"`
}

func (m *RaftMsg) Reset()                    { *m = RaftMsg{} }
func (m *RaftMsg) String() string            { return proto.CompactTextString(m) }
func (*RaftMsg) ProtoMessage()               {}
func (*RaftMsg) Descriptor() ([]byte, []int) { return fileDescriptorTransport, []int{0} }

func (m *RaftMsg) GetEpoch() int32 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *RaftMsg) GetMsgs() []raftpb.Message {
	if m != nil {
		return m.Msgs
	}
	return nil
}

func init() {
	proto.RegisterType((*RaftMsg)(nil), "transportpb.RaftMsg")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for RaftService service

type RaftServiceClient interface {
	RaftMessage(ctx context.Context, opts ...grpc.CallOption) (RaftService_RaftMessageClient, error)
}

type raftServiceClient struct {
	cc *grpc.ClientConn
}

func NewRaftServiceClient(cc *grpc.ClientConn) RaftServiceClient {
	return &raftServiceClient{cc}
}

func (c *raftServiceClient) RaftMessage(ctx context.Context, opts ...grpc.CallOption) (RaftService_RaftMessageClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_RaftService_serviceDesc.Streams[0], c.cc, "/transportpb.RaftService/RaftMessage", opts...)
	if err != nil {
		return nil, err
	}
	x := &raftServiceRaftMessageClient{stream}
	return x, nil
}

type RaftService_RaftMessageClient interface {
	Send(*RaftMsg) error
	Recv() (*RaftMsg, error)
	grpc.ClientStream
}

type raftServiceRaftMessageClient struct {
	grpc.ClientStream
}

func (x *raftServiceRaftMessageClient) Send(m *RaftMsg) error {
	return x.ClientStream.SendMsg(m)
}

func (x *raftServiceRaftMessageClient) Recv() (*RaftMsg, error) {
	m := new(RaftMsg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for RaftService service

type RaftServiceServer interface {
	RaftMessage(RaftService_RaftMessageServer) error
}

func RegisterRaftServiceServer(s *grpc.Server, srv RaftServiceServer) {
	s.RegisterService(&_RaftService_serviceDesc, srv)
}

func _RaftService_RaftMessage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RaftServiceServer).RaftMessage(&raftServiceRaftMessageServer{stream})
}

type RaftService_RaftMessageServer interface {
	Send(*RaftMsg) error
	Recv() (*RaftMsg, error)
	grpc.ServerStream
}

type raftServiceRaftMessageServer struct {
	grpc.ServerStream
}

func (x *raftServiceRaftMessageServer) Send(m *RaftMsg) error {
	return x.ServerStream.SendMsg(m)
}

func (x *raftServiceRaftMessageServer) Recv() (*RaftMsg, error) {
	m := new(RaftMsg)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _RaftService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "transportpb.RaftService",
	HandlerType: (*RaftServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RaftMessage",
			Handler:       _RaftService_RaftMessage_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "transport.proto",
}

func (m *RaftMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RaftMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Epoch != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTransport(dAtA, i, uint64(m.Epoch))
	}
	if len(m.Msgs) > 0 {
		for _, msg := range m.Msgs {
			dAtA[i] = 0x12
			i++
			i = encodeVarintTransport(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintTransport(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *RaftMsg) Size() (n int) {
	var l int
	_ = l
	if m.Epoch != 0 {
		n += 1 + sovTransport(uint64(m.Epoch))
	}
	if len(m.Msgs) > 0 {
		for _, e := range m.Msgs {
			l = e.Size()
			n += 1 + l + sovTransport(uint64(l))
		}
	}
	return n
}

func sovTransport(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTransport(x uint64) (n int) {
	return sovTransport(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RaftMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransport
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RaftMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RaftMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msgs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTransport
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msgs = append(m.Msgs, raftpb.Message{})
			if err := m.Msgs[len(m.Msgs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTransport(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTransport
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTransport(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTransport
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTransport
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTransport
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTransport
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTransport
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTransport(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTransport = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTransport   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("transport.proto", fileDescriptorTransport) }

var fileDescriptorTransport = []byte{
	// 212 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2f, 0x29, 0x4a, 0xcc,
	0x2b, 0x2e, 0xc8, 0x2f, 0x2a, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x86, 0x0b, 0x14,
	0x24, 0x49, 0x89, 0xa4, 0xe7, 0xa7, 0xe7, 0x83, 0xc5, 0xf5, 0x41, 0x2c, 0x88, 0x12, 0x29, 0xb5,
	0xf4, 0x7c, 0xbd, 0xd4, 0x92, 0xe4, 0x14, 0xbd, 0xcc, 0x7c, 0x7d, 0x10, 0xad, 0x5f, 0x94, 0x98,
	0x56, 0x02, 0x26, 0x0a, 0x92, 0xc0, 0x14, 0x44, 0x9d, 0x92, 0x17, 0x17, 0x7b, 0x50, 0x62, 0x5a,
	0x89, 0x6f, 0x71, 0xba, 0x90, 0x08, 0x17, 0x6b, 0x6a, 0x41, 0x7e, 0x72, 0x86, 0x04, 0xa3, 0x02,
	0xa3, 0x06, 0x6b, 0x10, 0x84, 0x23, 0xa4, 0xc9, 0xc5, 0x92, 0x5b, 0x9c, 0x5e, 0x2c, 0xc1, 0xa4,
	0xc0, 0xac, 0xc1, 0x6d, 0xc4, 0xaf, 0x07, 0x31, 0x42, 0xcf, 0x37, 0xb5, 0xb8, 0x38, 0x31, 0x3d,
	0xd5, 0x89, 0xe5, 0xc4, 0x3d, 0x79, 0x86, 0x20, 0xb0, 0x12, 0x23, 0x3f, 0x2e, 0x6e, 0x90, 0x59,
	0xc1, 0xa9, 0x45, 0x65, 0x99, 0xc9, 0xa9, 0x42, 0xf6, 0x10, 0x2e, 0x54, 0xa5, 0x90, 0x88, 0x1e,
	0x92, 0xab, 0xf5, 0xa0, 0x96, 0x4a, 0x61, 0x15, 0x55, 0x62, 0xd0, 0x60, 0x34, 0x60, 0x74, 0x12,
	0x38, 0xf1, 0x48, 0x8e, 0xf1, 0xc2, 0x23, 0x39, 0xc6, 0x07, 0x8f, 0xe4, 0x18, 0x27, 0x3c, 0x96,
	0x63, 0x48, 0x62, 0x03, 0x3b, 0xda, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x99, 0xe1, 0xbb, 0x2a,
	0x12, 0x01, 0x00, 0x00,
}
