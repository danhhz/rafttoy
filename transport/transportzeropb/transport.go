// Code generated by hand. DO NOT EDIT.

package transportzeropb

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

func (x *RaftMsg) Reset() {
	x.ResetWithBuf(nil)
}
func (x *RaftMsg) String() string {
	panic(`WIP`)
}
func (x *RaftMsg) ProtoMessage() {}
func (x *RaftMsg) Unmarshal(buf []byte) error {
	return x.Decode(buf)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for RaftService service

type RaftServiceClient interface {
	RaftMessage(ctx context.Context, opts ...grpc.CallOption) (RaftService_RaftMessageClient, error)
}

type raftServiceClient struct {
	cc *grpc.ClientConn
}

func NewRaftServiceClient(cc *grpc.ClientConn) RaftServiceClient {
	return &raftServiceClient{cc}
}

func (c *raftServiceClient) RaftMessage(ctx context.Context, opts ...grpc.CallOption) (RaftService_RaftMessageClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_RaftService_serviceDesc.Streams[0], c.cc, "/transportpb.RaftService/RaftMessage", opts...)
	if err != nil {
		return nil, err
	}
	x := &raftServiceRaftMessageClient{stream}
	return x, nil
}

type RaftService_RaftMessageClient interface {
	Send(*RaftMsg) error
	Recv() (*RaftMsg, error)
	grpc.ClientStream
}

type raftServiceRaftMessageClient struct {
	grpc.ClientStream
}

func (x *raftServiceRaftMessageClient) Send(m *RaftMsg) error {
	return x.ClientStream.SendMsg(m)
}

func (x *raftServiceRaftMessageClient) Recv() (*RaftMsg, error) {
	m := new(RaftMsg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for RaftService service

type RaftServiceServer interface {
	RaftMessage(RaftService_RaftMessageServer) error
}

func RegisterRaftServiceServer(s *grpc.Server, srv RaftServiceServer) {
	s.RegisterService(&_RaftService_serviceDesc, srv)
}

func _RaftService_RaftMessage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RaftServiceServer).RaftMessage(&raftServiceRaftMessageServer{stream})
}

type RaftService_RaftMessageServer interface {
	Send(*RaftMsg) error
	Recv() (*RaftMsg, error)
	grpc.ServerStream
}

type raftServiceRaftMessageServer struct {
	grpc.ServerStream
}

func (x *raftServiceRaftMessageServer) Send(m *RaftMsg) error {
	return x.ServerStream.SendMsg(m)
}

func (x *raftServiceRaftMessageServer) Recv() (*RaftMsg, error) {
	m := new(RaftMsg)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _RaftService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "transportpb.RaftService",
	HandlerType: (*RaftServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RaftMessage",
			Handler:       _RaftService_RaftMessage_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "transport.proto",
}
